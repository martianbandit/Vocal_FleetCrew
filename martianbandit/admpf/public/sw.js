const CACHE_NAME = 'voice-inspection-v1.0.0';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json',\n  '/icon-192.png',\n  '/icon-512.png'\n];\n\n// Install Service Worker\nself.addEventListener('install', (event) => {\n  console.log('Service Worker: Installing...');\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Service Worker: Caching files');\n        return cache.addAll(urlsToCache);\n      })\n      .then(() => {\n        console.log('Service Worker: Installation complete');\n        return self.skipWaiting();\n      })\n      .catch((error) => {\n        console.error('Service Worker: Installation failed', error);\n      })\n  );\n});\n\n// Activate Service Worker\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker: Activating...');\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker: Deleting old cache', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => {\n      console.log('Service Worker: Activation complete');\n      return self.clients.claim();\n    })\n  );\n});\n\n// Fetch Strategy: Cache First with Network Fallback\nself.addEventListener('fetch', (event) => {\n  // Skip non-HTTP requests\n  if (!event.request.url.startsWith('http')) {\n    return;\n  }\n\n  // Skip Chrome extension requests\n  if (event.request.url.includes('chrome-extension')) {\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version if available\n        if (response) {\n          console.log('Service Worker: Serving from cache', event.request.url);\n          return response;\n        }\n\n        // Clone the request\n        const fetchRequest = event.request.clone();\n\n        // Try to fetch from network\n        return fetch(fetchRequest).then((response) => {\n          // Check if we received a valid response\n          if (!response || response.status !== 200 || response.type !== 'basic') {\n            return response;\n          }\n\n          // Clone the response\n          const responseToCache = response.clone();\n\n          // Add to cache for future use\n          caches.open(CACHE_NAME)\n            .then((cache) => {\n              cache.put(event.request, responseToCache);\n            });\n\n          return response;\n        }).catch(() => {\n          // Network failed, try to serve offline page for navigation requests\n          if (event.request.destination === 'document') {\n            return caches.match('/');\n          }\n          \n          // For other requests, return a custom offline response\n          return new Response('Offline - Content not available', {\n            status: 503,\n            statusText: 'Service Unavailable',\n            headers: new Headers({\n              'Content-Type': 'text/plain'\n            })\n          });\n        });\n      })\n  );\n});\n\n// Background Sync for offline data\nself.addEventListener('sync', (event) => {\n  console.log('Service Worker: Background sync', event.tag);\n  \n  if (event.tag === 'sync-inspection-data') {\n    event.waitUntil(\n      syncInspectionData()\n    );\n  }\n});\n\n// Sync offline inspection data when online\nasync function syncInspectionData() {\n  try {\n    // Get offline data from IndexedDB\n    const offlineData = await getOfflineInspections();\n    \n    if (offlineData.length > 0) {\n      console.log('Service Worker: Syncing', offlineData.length, 'offline inspections');\n      \n      // Send data to server or cloud storage here\n      // For now, we'll just mark them as synced\n      await markInspectionsAsSynced(offlineData);\n      \n      // Notify the main app about successful sync\n      const clients = await self.clients.matchAll();\n      clients.forEach(client => {\n        client.postMessage({\n          type: 'SYNC_COMPLETE',\n          data: { syncedCount: offlineData.length }\n        });\n      });\n    }\n  } catch (error) {\n    console.error('Service Worker: Sync failed', error);\n  }\n}\n\n// Mock functions for offline data management\n// In a real app, these would interact with IndexedDB\nasync function getOfflineInspections() {\n  // This would query IndexedDB for unsynced inspections\n  return [];\n}\n\nasync function markInspectionsAsSynced(inspections) {\n  // This would update IndexedDB records as synced\n  console.log('Marking inspections as synced:', inspections);\n}\n\n// Push notifications (for future enhancement)\nself.addEventListener('push', (event) => {\n  console.log('Service Worker: Push message received');\n  \n  const options = {\n    body: event.data ? event.data.text() : 'New inspection reminder',\n    icon: '/icon-192.png',\n    badge: '/icon-192.png',\n    vibrate: [100, 50, 100],\n    actions: [\n      {\n        action: 'open',\n        title: 'Ouvrir',\n        icon: '/icon-192.png'\n      },\n      {\n        action: 'close',\n        title: 'Fermer'\n      }\n    ]\n  };\n  \n  event.waitUntil(\n    self.registration.showNotification('Assistant d\\'Inspection', options)\n  );\n});\n\n// Notification click handler\nself.addEventListener('notificationclick', (event) => {\n  console.log('Service Worker: Notification click', event.action);\n  \n  event.notification.close();\n  \n  if (event.action === 'open') {\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});